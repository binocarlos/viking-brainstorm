#!/usr/bin/env node

var program = require('commander');
var async = require('async');
var utils = require('component-consoler');
var path = require('path');
var fs = require('fs');
var log = utils.log;
var spawn = require('child_process').spawn
var config = require('../lib/config')();
var etcdjs = require('etcdjs')
var Etcd = require('../lib/services/etcd');
var Registry = require('../lib/services/registry');
var Deployment = require('../lib/deployment')
var Host = require('../lib/services/host');

program
  //.usage('viking build [scripts] [styles] [files]')
  .usage('')
  .option('-e, --etcd', 'only start etcd')
  .option('-h, --host', 'only start the host')
  .option('-s, --stack [stackname]', 'stop a single stack')

program.parse(process.argv);

if(program.etcd){
  program.filter = 'etcd'
}

if(program.host){
  program.filter = 'host'
}

if(program.stack){
  program.filter = 'stack'
}

function stopStack(etcd, deployment, name, done){
  
  utils.log('stack: ' + name, 'stopping')
  deployment.removeStack(name, function(err){
    utils.log('stack: ' + name, 'stopped')
    done(err)
  })

}

function stopStacks(done){
  if(program.filter && program.filter!='stack'){
    return done()
  }
  var etcd = etcdjs(config.network.etcd)
  var deployment = Deployment(config, etcd)

  deployment.getStackNames(function(err, stacks){
    stacks = (stacks || []).filter(function(stack){

      return program.stack && program.stack!=stack ? false : true
      
    })

    async.forEachSeries(stacks, function(stack, nextStack){
      stopStack(etcd, deployment, stack, nextStack)
    }, function(err){
      if(err) return done(err)
      setTimeout(done, 2000)

    })
  })
}

function stopEtcd(done){
  if(!config.master){
    return done()
  }
  if(program.host){
    return done()
  }
  if(program.filter && program.filter!='etcd'){
    return done()
  }
  var etcd = Etcd(config);

  etcd.on('stopped', function(){
    utils.log('etcd', 'stopped')
  })

  etcd.on('alreadystopped', function(){
    utils.log('etcd', 'already stopped')
  })

  etcd.stop(done)
}

function stopHost(done){

  if(program.filter && program.filter!='host'){
    return done()
  }
  var host = Host(config)

  host.on('stopped', function(){
    utils.log('viking-host', 'stopped')
  })

  host.on('alreadystopped', function(){
    utils.log('viking-host', 'already stopped')
  })

  host.stop(function(){
    setTimeout(done,100)
  })
}

async.series([

  stopStacks,

  stopEtcd,

  stopHost
  
], function(){
  utils.log('viking-master', 'stopped');
})