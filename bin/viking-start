#!/usr/bin/env node
var program = require('commander')
var spawn = require('child_process').spawn
var path = require('path')
var fs = require('fs')
var async = require('async')
var utils = require('component-consoler');
var Etcd = require('../lib/services/etcd');
var config = require('../lib/config')();
var token = require('../lib/tools/etcdtoken')
var Host = require('../lib/services/host')
var Tail = require('tail').Tail;

program
  //.usage('viking build [scripts] [styles] [files]')
  .usage('')
  .option('-s, --seed', 'generate a new etcd cluster token', true)
  .option('-t, --tail', 'tail the host logs')
 
program.parse(process.argv);

function getToken(done){

  if(!config.master){
    throw new Error('cannot seed a viking server unless it is a master')
  }

	if(!program.seed){
		return done()
	}

	token(function(err, token){
	  fs.writeFileSync(config.network.tokenpath, token, 'utf8')
	  done()
	})
}

function startEtcd(done){

  if(!config.master){
    return done()
  }
  var etcd = Etcd(config);

  etcd.on('running', function(){
    utils.log('etcd', 'already running')
  })

  etcd.on('removed', function(){
    utils.log('etcd', 'removed old container')
  })

  etcd.on('started', function(){
    utils.log('etcd', 'running')
  })

  etcd.start(function(){
    setTimeout(done, 1000)
  })
}

function startHost(done){

	var host = Host(config)

	host.on('running', function(){
    utils.log('viking-host', 'already running')
  })

  host.on('removed', function(){
    utils.log('viking-host', 'removed old container')
  })

  host.on('started', function(){
    utils.log('viking-host', 'running')
  })

  host.start(done)
}

function tailLogs(next){
  if(program.tail){

    var host = Host(config)
    var files = host.files()

    if(!fs.existsSync(files.log)){
      console.error('the viking host is not running - cannot tail')
      return next()
    }
    var tail = new Tail(files.log);

    tail.on("line", function(data) {
      console.log(data);
    });
    
  }
  else{
    next()
  }
}

async.series([
	getToken,
	startEtcd,
	startHost,
  tailLogs
], function(){
	process.exit();
})