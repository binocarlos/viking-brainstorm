# our viking is born
viking:
  name: ragnar
  comment: Ragnarr Hamster Loðbrók

# must build boats before sail
# can use local boats in FROM statements using:
# FROM viking:<stackname>/<boatname>
build:
  src: |
    FROM quarry/monnode
    ADD . /srv/app
    RUN cd /srv/app && npm install
# RUN cd /srv/app && npm --registry http://registry.npmjs.eu/ install    
# images can inherit from other images in viking
# this image inherits from ragnar/src
  inherit: |
    FROM viking:ragnar/src
    RUN echo "setting" > /etc/mysetting

# our warrior viking formation
deploy:
  # the db viking - this is a node.js process that wraps a leveldb
  # we save the leveldb data into a volume so when we push new code - the data is still there
  db:
    # what boat this warrior will use
    image: viking:ragnar/src
    # expose docker ports - this automatically writes an endpoint to etcd for everything to see
    expose:
      - 80
    # allow persistent data - if a container has a volume it means it will be run on the same server each time
    volume:
      - /data/custom:/data/db
    # write the mongo connection details into the env
    link:
      - mongo
    # the command we run for this node
    command: mon node db/index.js --volume /data/db
    # where the command is run
    cwd: /srv/app
  # a stateless service - this can be scaled and will run anywhere
  logic:
    # we use the same base codebase
    image: viking:ragnar/src
    # this means 2 processes will be run on different servers (if possible)
    scale: 2
    expose:
      - 80
    # and they have specific instructions
    command: mon node logic/index.js
    cwd: /srv/app
  # a HTTP serving process - this is stateless and will expose domains to the front router
  website:
    image: viking:ragnar/src
    scale: 3
    expose:
      - 80
    # you can link to other stacks also
    link:
      - redis
    command: mon node website/index.js
    cwd: /srv/app
    # each domain is automapped to the front end HTTP router
    # this applies to each of the exposed ports in the image
    route:
      - "testviking.digger.io"
      - "testviking.local.digger.io"
  # a static website - this required no memory it will be virtuall hosted by the generic web server
  help:
    type: website
    # the document_root triggers static website mode
    document_root: ./help/www
    # static websites get hooked up to the front router too
    route:
      - "help.testviking.digger.io"
      - "help.testviking.local.digger.io"
  # a service - these are fixed containers (with volumes) that are not restarted
  mongo:
    image: quarry/mongo
    # static means run once and dont restart
    # this is useful for database servers
    static: true
    expose:
      - 27017
    volume:
      - /data/mongo:/data/db
  redis:
    image: quarry/redis
    static: true
    expose:
      - 6379
    volume:
      - /data/redis:/data/db

  